{"version":3,"sources":["components/info.js","components/form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","className","React","Component","Form","onSubmit","this","props","weatherMethod","type","name","placeholder","Weather","city","country","temp","sunrise","pressure","humidity","currentDate","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api","json","data","sys","date","Date","setTime","sunrise_date","getHours","getMinutes","getSeconds","cur","month","getMonth","current","getDate","getFullYear","toLocaleTimeString","console","log","setState","main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAYeA,E,iLARP,OACI,yBAAKC,UAAU,UACX,6IACA,+L,GALGC,IAAMC,WCUVC,E,iLARP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,eACvB,2BAAOP,UAAU,eAAeQ,KAAK,OAAOC,KAAK,OAAOC,YAAY,8EACpE,4BAAQV,UAAU,mBAAlB,kF,GALGC,IAAMC,WCsBVS,E,iLAnBP,OAEI,6BACCN,KAAKC,MAAMM,MACR,yBAAKZ,UAAU,kBACX,oHAAoBK,KAAKC,MAAMM,KAA/B,KAAuCP,KAAKC,MAAMO,SAClD,kGAAiBR,KAAKC,MAAMQ,KAAK,oCACjC,yGAAmBT,KAAKC,MAAMS,SAC9B,mJAA0BV,KAAKC,MAAMU,SAArC,4CACA,iIAAuBX,KAAKC,MAAMW,SAAlC,KACA,mGAAkBZ,KAAKC,MAAMY,cAGrC,4BAAKb,KAAKC,MAAMa,Y,GAhBNlB,IAAMC,WCMtBkB,G,MAAU,oCAoFDC,E,2MAhFbC,MAAQ,CACNR,UAAMS,EACNX,UAAMW,EACNV,aAASU,EACTR,aAASQ,EACTP,cAAUO,EACVN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAITC,e,uCAAiB,WAAMC,GAAN,+BAAAC,EAAA,6DACfD,EAAEE,iBACIf,EAAOa,EAAEG,OAAOC,SAASjB,KAAKkB,MAFrB,SAGGC,MAAM,qDAAD,OAAsDnB,EAAtD,kBAAoEQ,EAApE,kBAHR,cAGTY,EAHS,gBAIIA,EAAIC,OAJR,OAITC,EAJS,OAMZtB,GAAQsB,EAAKzB,MACVM,EAAUmB,EAAKC,IAAIpB,SACnBqB,EAAO,IAAIC,MACVC,QAAQvB,GACTwB,EAAeH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAGtEC,EAAM,IAAIN,KACVO,EAAQD,EAAIE,WAAa,EACzBC,EAAUH,EAAII,UAAY,IAAMH,EAAQ,IAAMD,EAAIK,cAAgB,UAAYL,EAAIM,qBACtFC,QAAQC,IAAIjB,EAAKC,IAAIpB,SAErBmC,QAAQC,IAAIR,GACZO,QAAQC,IAAIjB,GAEZ,EAAKkB,SAAS,CACZtC,KAAMoB,EAAKmB,KAAKvC,KAChBF,KAAMsB,EAAKzB,KACXI,QAASqB,EAAKC,IAAItB,QAClBE,QAASwB,EACTvB,SAAUkB,EAAKmB,KAAKrC,SACpBC,SAAUiB,EAAKmB,KAAKpC,SACpBC,YAAa4B,EACb3B,WAAOI,KAKT,EAAK6B,SAAS,CACZtC,UAAMS,EACNX,UAAMW,EACNV,aAASU,EACTR,aAASQ,EACTP,cAAUO,EACVN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,kKA1CI,2C,8HAiDf,OACE,yBAAKnB,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMO,cAAeF,KAAKmB,iBAC1B,kBAAC,EAAD,CACEV,KAAMT,KAAKiB,MAAMR,KACjBF,KAAMP,KAAKiB,MAAMV,KACjBC,QAASR,KAAKiB,MAAMT,QACpBE,QAASV,KAAKiB,MAAMP,QACpBC,SAAUX,KAAKiB,MAAMN,SACrBC,SAAUZ,KAAKiB,MAAML,SACrBC,YAAab,KAAKiB,MAAMJ,YACxBC,MAAOd,KAAKiB,MAAMH,a,GA3EVlB,IAAMC,WCEJoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6fbad36c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Info extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <h1>Погодное приложение</h1>\r\n                <p>Узнайте погоду в вашем городе!</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Info;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.weatherMethod}>\r\n                <input className=\"form-control\" type=\"text\" name=\"city\" placeholder=\"Введите город\"/>\r\n                <button className=\"btn btn-primary\">Узнать погоду</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default Form;","import React from 'react';\r\n\r\nclass Weather extends React.Component {\r\n    render() {  \r\n\r\n        return (\r\n            \r\n            <div>\r\n            {this.props.city &&\r\n                <div className=\"card card-body\">\r\n                    <p>Местоположение: {this.props.city}, {this.props.country}</p>\r\n                    <p>Температура: {this.props.temp}<sup> o</sup></p>\r\n                    <p>Восход солнца: {this.props.sunrise}</p>\r\n                    <p>Атмосферное давление: {this.props.pressure} мм.рт.ст.</p>\r\n                    <p>Влажность воздуха: {this.props.humidity}%</p>\r\n                    <p>Дата запроса: {this.props.currentDate}</p>\r\n                </div>\r\n            }\r\n            <h3>{this.props.error}</h3>\r\n            </div>  \r\n            \r\n        );\r\n    }\r\n}\r\nexport default Weather;","import React from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/Weather'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\n\n\nconst API_KEY = \"15391a4f19ecd29938a75e759e18b0d3\";\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    sunrise: undefined,\n    pressure: undefined,\n    humidity: undefined,\n    currentDate: undefined,\n    error: undefined\n    \n  }\n\n  gettingWeather = async(e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n    const data = await api.json();\n    \n    if(city && data.name) {\n      var sunrise = data.sys.sunrise;\n      var date = new Date();\n      date.setTime(sunrise);\n      var sunrise_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n      \n      var cur = new Date();\n      var month = cur.getMonth() + 1;\n      var current = cur.getDate() + \"-\" + month + \"-\" + cur.getFullYear() + \"г\" + \" \" + cur.toLocaleTimeString();\n      console.log(data.sys.sunrise);\n     \n      console.log(cur);   \n      console.log(data);  \n      \n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        sunrise: sunrise_date,\n        pressure: data.main.pressure,\n        humidity: data.main.humidity,\n        currentDate: current,\n        error: undefined\n        \n      });\n    }\n    else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        sunrise: undefined,\n        pressure: undefined,\n        humidity: undefined,\n        currentDate: undefined,\n        error: <h3>Введите название города</h3>\n      });\n    } \n    \n    \n  }\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Info/>\n        <Form weatherMethod={this.gettingWeather}/>\n        <Weather\n          temp={this.state.temp}\n          city={this.state.city}\n          country={this.state.country}\n          sunrise={this.state.sunrise}\n          pressure={this.state.pressure}\n          humidity={this.state.humidity}\n          currentDate={this.state.currentDate}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}